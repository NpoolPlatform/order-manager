// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/order-manager/pkg/db/ent/state"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   state.Table,
			Columns: state.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: state.FieldID,
			},
		},
		Type: "State",
		Fields: map[string]*sqlgraph.FieldSpec{
			state.FieldCreatedAt: {Type: field.TypeUint32, Column: state.FieldCreatedAt},
			state.FieldUpdatedAt: {Type: field.TypeUint32, Column: state.FieldUpdatedAt},
			state.FieldDeletedAt: {Type: field.TypeUint32, Column: state.FieldDeletedAt},
			state.FieldOrderID:   {Type: field.TypeUUID, Column: state.FieldOrderID},
			state.FieldState:     {Type: field.TypeString, Column: state.FieldState},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (sq *StateQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StateQuery builder.
func (sq *StateQuery) Filter() *StateFilter {
	return &StateFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StateMutation builder.
func (m *StateMutation) Filter() *StateFilter {
	return &StateFilter{m}
}

// StateFilter provides a generic filtering capability at runtime for StateQuery.
type StateFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StateFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(state.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *StateFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(state.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *StateFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(state.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *StateFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(state.FieldDeletedAt))
}

// WhereOrderID applies the entql [16]byte predicate on the order_id field.
func (f *StateFilter) WhereOrderID(p entql.ValueP) {
	f.Where(p.Field(state.FieldOrderID))
}

// WhereState applies the entql string predicate on the state field.
func (f *StateFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(state.FieldState))
}
