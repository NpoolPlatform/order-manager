// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/order-manager/pkg/db/ent/state"
	"github.com/google/uuid"
)

// StateCreate is the builder for creating a State entity.
type StateCreate struct {
	config
	mutation *StateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StateCreate) SetCreatedAt(u uint32) *StateCreate {
	sc.mutation.SetCreatedAt(u)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StateCreate) SetNillableCreatedAt(u *uint32) *StateCreate {
	if u != nil {
		sc.SetCreatedAt(*u)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StateCreate) SetUpdatedAt(u uint32) *StateCreate {
	sc.mutation.SetUpdatedAt(u)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StateCreate) SetNillableUpdatedAt(u *uint32) *StateCreate {
	if u != nil {
		sc.SetUpdatedAt(*u)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StateCreate) SetDeletedAt(u uint32) *StateCreate {
	sc.mutation.SetDeletedAt(u)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StateCreate) SetNillableDeletedAt(u *uint32) *StateCreate {
	if u != nil {
		sc.SetDeletedAt(*u)
	}
	return sc
}

// SetOrderID sets the "order_id" field.
func (sc *StateCreate) SetOrderID(u uuid.UUID) *StateCreate {
	sc.mutation.SetOrderID(u)
	return sc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (sc *StateCreate) SetNillableOrderID(u *uuid.UUID) *StateCreate {
	if u != nil {
		sc.SetOrderID(*u)
	}
	return sc
}

// SetState sets the "state" field.
func (sc *StateCreate) SetState(s string) *StateCreate {
	sc.mutation.SetState(s)
	return sc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sc *StateCreate) SetNillableState(s *string) *StateCreate {
	if s != nil {
		sc.SetState(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StateCreate) SetID(u uuid.UUID) *StateCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StateCreate) SetNillableID(u *uuid.UUID) *StateCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the StateMutation object of the builder.
func (sc *StateCreate) Mutation() *StateMutation {
	return sc.mutation
}

// Save creates the State in the database.
func (sc *StateCreate) Save(ctx context.Context) (*State, error) {
	var (
		err  error
		node *State
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StateCreate) SaveX(ctx context.Context) *State {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StateCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StateCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StateCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if state.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized state.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := state.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if state.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized state.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := state.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		if state.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized state.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := state.DefaultDeletedAt()
		sc.mutation.SetDeletedAt(v)
	}
	if _, ok := sc.mutation.OrderID(); !ok {
		if state.DefaultOrderID == nil {
			return fmt.Errorf("ent: uninitialized state.DefaultOrderID (forgotten import ent/runtime?)")
		}
		v := state.DefaultOrderID()
		sc.mutation.SetOrderID(v)
	}
	if _, ok := sc.mutation.State(); !ok {
		v := state.DefaultState
		sc.mutation.SetState(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if state.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized state.DefaultID (forgotten import ent/runtime?)")
		}
		v := state.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StateCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "State.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "State.updated_at"`)}
	}
	if _, ok := sc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "State.deleted_at"`)}
	}
	return nil
}

func (sc *StateCreate) sqlSave(ctx context.Context) (*State, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *StateCreate) createSpec() (*State, *sqlgraph.CreateSpec) {
	var (
		_node = &State{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: state.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: state.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: state.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: state.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: state.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: state.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := sc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldState,
		})
		_node.State = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.State.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StateCreate) OnConflict(opts ...sql.ConflictOption) *StateUpsertOne {
	sc.conflict = opts
	return &StateUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.State.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StateCreate) OnConflictColumns(columns ...string) *StateUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StateUpsertOne{
		create: sc,
	}
}

type (
	// StateUpsertOne is the builder for "upsert"-ing
	//  one State node.
	StateUpsertOne struct {
		create *StateCreate
	}

	// StateUpsert is the "OnConflict" setter.
	StateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StateUpsert) SetCreatedAt(v uint32) *StateUpsert {
	u.Set(state.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StateUpsert) UpdateCreatedAt() *StateUpsert {
	u.SetExcluded(state.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StateUpsert) AddCreatedAt(v uint32) *StateUpsert {
	u.Add(state.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StateUpsert) SetUpdatedAt(v uint32) *StateUpsert {
	u.Set(state.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StateUpsert) UpdateUpdatedAt() *StateUpsert {
	u.SetExcluded(state.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StateUpsert) AddUpdatedAt(v uint32) *StateUpsert {
	u.Add(state.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StateUpsert) SetDeletedAt(v uint32) *StateUpsert {
	u.Set(state.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StateUpsert) UpdateDeletedAt() *StateUpsert {
	u.SetExcluded(state.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StateUpsert) AddDeletedAt(v uint32) *StateUpsert {
	u.Add(state.FieldDeletedAt, v)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *StateUpsert) SetOrderID(v uuid.UUID) *StateUpsert {
	u.Set(state.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StateUpsert) UpdateOrderID() *StateUpsert {
	u.SetExcluded(state.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StateUpsert) ClearOrderID() *StateUpsert {
	u.SetNull(state.FieldOrderID)
	return u
}

// SetState sets the "state" field.
func (u *StateUpsert) SetState(v string) *StateUpsert {
	u.Set(state.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StateUpsert) UpdateState() *StateUpsert {
	u.SetExcluded(state.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *StateUpsert) ClearState() *StateUpsert {
	u.SetNull(state.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.State.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(state.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StateUpsertOne) UpdateNewValues() *StateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(state.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.State.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StateUpsertOne) Ignore() *StateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StateUpsertOne) DoNothing() *StateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StateCreate.OnConflict
// documentation for more info.
func (u *StateUpsertOne) Update(set func(*StateUpsert)) *StateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StateUpsertOne) SetCreatedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StateUpsertOne) AddCreatedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StateUpsertOne) UpdateCreatedAt() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StateUpsertOne) SetUpdatedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StateUpsertOne) AddUpdatedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StateUpsertOne) UpdateUpdatedAt() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StateUpsertOne) SetDeletedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StateUpsertOne) AddDeletedAt(v uint32) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StateUpsertOne) UpdateDeletedAt() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *StateUpsertOne) SetOrderID(v uuid.UUID) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StateUpsertOne) UpdateOrderID() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StateUpsertOne) ClearOrderID() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.ClearOrderID()
	})
}

// SetState sets the "state" field.
func (u *StateUpsertOne) SetState(v string) *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StateUpsertOne) UpdateState() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *StateUpsertOne) ClearState() *StateUpsertOne {
	return u.Update(func(s *StateUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *StateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StateUpsertOne.ID is not supported by MySQL driver. Use StateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StateCreateBulk is the builder for creating many State entities in bulk.
type StateCreateBulk struct {
	config
	builders []*StateCreate
	conflict []sql.ConflictOption
}

// Save creates the State entities in the database.
func (scb *StateCreateBulk) Save(ctx context.Context) ([]*State, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*State, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StateCreateBulk) SaveX(ctx context.Context) []*State {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StateCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StateCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.State.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StateCreateBulk) OnConflict(opts ...sql.ConflictOption) *StateUpsertBulk {
	scb.conflict = opts
	return &StateUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.State.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StateCreateBulk) OnConflictColumns(columns ...string) *StateUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StateUpsertBulk{
		create: scb,
	}
}

// StateUpsertBulk is the builder for "upsert"-ing
// a bulk of State nodes.
type StateUpsertBulk struct {
	create *StateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.State.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(state.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StateUpsertBulk) UpdateNewValues() *StateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(state.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.State.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StateUpsertBulk) Ignore() *StateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StateUpsertBulk) DoNothing() *StateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StateCreateBulk.OnConflict
// documentation for more info.
func (u *StateUpsertBulk) Update(set func(*StateUpsert)) *StateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StateUpsertBulk) SetCreatedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *StateUpsertBulk) AddCreatedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StateUpsertBulk) UpdateCreatedAt() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StateUpsertBulk) SetUpdatedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *StateUpsertBulk) AddUpdatedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StateUpsertBulk) UpdateUpdatedAt() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StateUpsertBulk) SetDeletedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *StateUpsertBulk) AddDeletedAt(v uint32) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StateUpsertBulk) UpdateDeletedAt() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetOrderID sets the "order_id" field.
func (u *StateUpsertBulk) SetOrderID(v uuid.UUID) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *StateUpsertBulk) UpdateOrderID() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *StateUpsertBulk) ClearOrderID() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.ClearOrderID()
	})
}

// SetState sets the "state" field.
func (u *StateUpsertBulk) SetState(v string) *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StateUpsertBulk) UpdateState() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *StateUpsertBulk) ClearState() *StateUpsertBulk {
	return u.Update(func(s *StateUpsert) {
		s.ClearState()
	})
}

// Exec executes the query.
func (u *StateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
